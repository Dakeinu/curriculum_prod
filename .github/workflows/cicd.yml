name: CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      status: ${{ job.status }}
      build-error: ${{ steps.build-output.outputs.error-message }}
      deploy-error: ${{ steps.deploy-output.outputs.error-message }}

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build Docker image
        run: docker build -t dakeinu/curriculum:latest -f ./Dockerfile .

      - name: Push Docker image to Docker Hub
        run: docker push dakeinu/curriculum:latest

      - name: Setup SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -t rsa ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Update server and deploy with Docker
        id: deploy-output
        run: |
          ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} << EOF
            sudo -u ${{ secrets.SSH_CHANGED_USER }} bash -c "
              cd ${{secrets.SSH_CD_PATH}}
              git pull
              docker pull dakeinu/curriculum:latest
              docker-compose up -d --build &> deploy-error.log
            " || echo "::set-output name=error-message::$(cat deploy-error.log)"
          EOF
        
      - name: Capture build error message
        if: failure()
        id: build-output
        run: |
          echo "::set-output name=error-message::$(docker images | grep curriculum)"

  check-site:
    needs: build-and-push
    runs-on: ubuntu-latest
    outputs:
      site-status: ${{ steps.check-site.outputs.site-status }}
    if: needs.build-and-push.outputs.status == 'success'
    steps:
      - name: Check if the site is online
        id: check-site
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" ${{ secrets.SITE_URL }})
          echo "Response code: $response"
          if [ "$response" -ne 200 ]; then
            echo "::set-output name=site-status::down"
          else
            echo "::set-output name=site-status::up"

  notification:
    needs: [build-and-push, check-site]
    runs-on: ubuntu-latest
    if: always()  # ExÃ©cutÃ© peu importe le rÃ©sultat des jobs prÃ©cÃ©dents
    steps:
      - name: Check previous job results and send notification
        run: |
          build_status="${{ needs.build-and-push.outputs.status }}"
          site_status="${{ needs.check-site.outputs.site-status }}"

          # Initialisation du message avec le status de la construction et du dÃ©ploiement
          if [ "$build_status" == "success" ]; then
            build_message="âœ… Build and deployment were successful."
          else
            build_message="ðŸš¨ Build or deployment failed."
            if [ -n "${{ needs.build-and-push.outputs.build-error }}" ]; then
              build_message+=" Build error: ${{ needs.build-and-push.outputs.build-error }}"
            fi
            if [ -n "${{ needs.build-and-push.outputs.deploy-error }}" ]; then
              build_message+=" Deployment error: ${{ needs.build-and-push.outputs.deploy-error }}"
            fi
          fi

          # Ajout du status du site au message
          if [ "$site_status" == "up" ]; then
            site_message="âœ… Site is online."
          else
            site_message="ðŸš¨ Site is DOWN or unreachable."
          fi

          echo "REPO_URL=${{ github.server_url }}/${{ github.repository }}" >> $GITHUB_ENV
          echo "SITE_CHECK=$site_message" >> $GITHUB_ENV
          echo "MESSAGE=$build_message" >> $GITHUB_ENV

      - name: Call n8n webhook with result
        run: |
          payload=$( jq -n \
                          --arg message "$MESSAGE" \
                          --arg site_check "$SITE_CHECK" \
                          --arg repo_url "$REPO_URL" \
                          '{text: $message, status: $site_check, url: $repo_url}' )
          # curl -X POST -H "Content-type: application/json" --data "$payload" ${{ secrets.WEBHOOK_URL }}
          curl -X POST -H "Content-type: application/json" --data "$payload" ${{ secrets.WEBHOOK_URL_PROD }}
  
